# function update_latency(int link_latency) -> int {
#   bgp_community.add((64511, link_latency));
#        if (64511, 9) ~ bgp_community then { bgp_community.delete([(64511, 1..8)]); return 9; }
#   else if (64511, 8) ~ bgp_community then { bgp_community.delete([(64511, 1..7)]); return 8; }
#   else if (64511, 7) ~ bgp_community then { bgp_community.delete([(64511, 1..6)]); return 7; }
#   else if (64511, 6) ~ bgp_community then { bgp_community.delete([(64511, 1..5)]); return 6; }
#   else if (64511, 5) ~ bgp_community then { bgp_community.delete([(64511, 1..4)]); return 5; }
#   else if (64511, 4) ~ bgp_community then { bgp_community.delete([(64511, 1..3)]); return 4; }
#   else if (64511, 3) ~ bgp_community then { bgp_community.delete([(64511, 1..2)]); return 3; }
#   else if (64511, 2) ~ bgp_community then { bgp_community.delete([(64511, 1..1)]); return 2; }
#   else return 1;
# }

function update_latency(int link_latency) -> int {
  int max_latency;

  bgp_community.add((64511, link_latency));
  max_latency = bgp_community.filter([(64511, 1..9)]).max.data;
  bgp_community.delete([(64511, 1..9)]);
  bgp_community.add((64511,max_latency));
  return max_latency;
}

# function update_bandwidth(int link_bandwidth) -> int {
#   bgp_community.add((64511, link_bandwidth));
#        if (64511, 21) ~ bgp_community then { bgp_community.delete([(64511, 22..29)]); return 21; }
#   else if (64511, 22) ~ bgp_community then { bgp_community.delete([(64511, 23..29)]); return 22; }
#   else if (64511, 23) ~ bgp_community then { bgp_community.delete([(64511, 24..29)]); return 23; }
#   else if (64511, 24) ~ bgp_community then { bgp_community.delete([(64511, 25..29)]); return 24; }
#   else if (64511, 25) ~ bgp_community then { bgp_community.delete([(64511, 26..29)]); return 25; }
#   else if (64511, 26) ~ bgp_community then { bgp_community.delete([(64511, 27..29)]); return 26; }
#   else if (64511, 27) ~ bgp_community then { bgp_community.delete([(64511, 28..29)]); return 27; }
#   else if (64511, 28) ~ bgp_community then { bgp_community.delete([(64511, 29..29)]); return 28; }
#   else return 29;
# }

function update_bandwidth(int link_bandwidth) -> int {
  int min_bandwidth;

  bgp_community.add((64511, link_bandwidth));
  min_bandwidth = bgp_community.filter([(64511, 21..29)]).min.data;
  bgp_community.delete([(64511, 21..29)]);
  bgp_community.add((64511, min_bandwidth));
  return min_bandwidth;
}

# function update_crypto(int link_crypto) -> int {
#   bgp_community.add((64511, link_crypto));
#        if (64511, 31) ~ bgp_community then { bgp_community.delete([(64511, 32..34)]); return 31; }
#   else if (64511, 32) ~ bgp_community then { bgp_community.delete([(64511, 33..34)]); return 32; }
#   else if (64511, 33) ~ bgp_community then { bgp_community.delete([(64511, 34..34)]); return 33; }
#   else return 34;
# }

function update_crypto(int link_crypto) -> int {
  int min_crypto;

  bgp_community.add((64511, link_crypto));
  min_crypto = bgp_community.filter([(64511, 31..34)]).min.data;
  bgp_community.delete([(64511, 31..34)]);
  bgp_community.add((64511, min_crypto));
  return min_crypto;
}


# Remove the following function if you do not want to advertize your region in the BGP community.
function update_geo_flags() -> bool {
    if is_self_net() || is_self_net_v6() then {
        bgp_community.add((64511, DN_REGION_GEO));
	    bgp_community.add((64511, DN_REGION_COUNTRY));
    }
}

function update_flags(int link_latency; int link_bandwidth; int link_crypto) -> bool
int dn42_latency;
int dn42_bandwidth;
int dn42_crypto;
{
  dn42_latency = update_latency(link_latency);
  dn42_bandwidth = update_bandwidth(link_bandwidth) - 20;
  dn42_crypto = update_crypto(link_crypto) - 30;
  # replace 4 with your calculated bandwidth value
  if dn42_bandwidth > 4 then dn42_bandwidth = 4;
  return true;
}

# Uses ROA, which means it should be imported before these functions

function dn42_import_filter(int link_latency; int link_bandwidth; int link_crypto) {
  # IPv4 routes with ROA
  if is_valid_network() && !is_self_net() then {
    if (roa_check(dn42_roa, net, bgp_path.last) != ROA_VALID) then {
      # Reject when unknown or invalid according to ROA
      print "[dn42] IPv4 ROA check failed for ", net, " ASN ", bgp_path.last;
      reject;
    }

    update_flags(link_latency, link_bandwidth, link_crypto);

    if (bgp_path.len = 1) then
      bgp_local_pref = bgp_local_pref + 500;

    accept;
  }

  # IPv6 routes with ROA
  if is_valid_network_v6() && !is_self_net_v6() then {
    if (roa_check(dn42_roa_v6, net, bgp_path.last) != ROA_VALID) then {
      # Reject when unknown or invalid according to ROA
      print "[dn42] IPv6 ROA check failed for ", net, " ASN ", bgp_path.last;
      reject;
    }

    update_flags(link_latency, link_bandwidth, link_crypto);

    if (bgp_path.len = 1) then
      bgp_local_pref = bgp_local_pref + 500;

    accept;
  }

  # Re
  reject;
}
function dn42_export_filter(int link_latency; int link_bandwidth; int link_crypto) {
  if is_valid_network() || is_valid_network_v6() then {
    update_flags(link_latency, link_bandwidth, link_crypto);
    update_geo_flags();
    bgp_med = 0;
    bgp_med = bgp_med + ( ( 4 - ( link_crypto - 30 ) ) * 600 );
    bgp_med = bgp_med + ( ( 9 - ( link_bandwidth - 20 ) ) * 100);
    bgp_med = bgp_med + ( ( link_latency - 1) * 300);

    accept;
  }
  reject;
}

